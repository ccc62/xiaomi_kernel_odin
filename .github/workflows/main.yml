name: Xiaomi Odin Kernel CI Build (Android 5.4)

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      root_choice:
        type: choice
        description: Choose root implementation
        options:
          - kernelsu_next
          - kernelsu_stable
          - suki_su_ultra
          - mksu_root
        default: kernelsu_next

jobs:
  build_kernel:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    env:
      TARGET_DEFCONFIG: "odin_defconfig"
      BUILD_USER: "xiaomi_kernel_builder"
      BUILD_HOST: "github_actions"
      KPM_FLAG: "0"

    steps:
      - name: Clone repository with submodules
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup build environment
        run: |
          sudo apt update
          sudo apt install -y git flex bison libssl-dev libelf-dev zip unzip ccache
          export PATH="${PWD}/xiaomi_kernel_odin/scripts/tools/clang-r383902b1/bin:${PWD}/xiaomi_kernel_odin/scripts/tools/aarch64-linux-android-4.9/bin:$PATH"

      - name: Configure build arguments
        id: build_vars
        run: |
          echo "::set-output name=build_flags:: -j$(nproc) O=out CC=clang ARCH=arm64 SUBARCH=arm64 LD=ld.lld AR=llvm-ar NM=llvm-nm STRIP=llvm-strip OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump READELF=llvm-readelf HOSTCC=clang HOSTCXX=clang++ HOSTAR=llvm-ar HOSTLD=ld.lld CLANG_TRIPLE=aarch64-linux-gnu- CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_COMPAT=arm-linux-gnueabi- LLVM=1 LLVM_IAS=1"

      - name: Install root module
        run: |
          MODULE_PATH="xiaomi_kernel_odin/drivers/kernelsu"
          case "${{ github.event.inputs.root_choice }}" in
            kernelsu_next)
              cp -r xiaomi_kernel_odin/scripts/tools/root/Kernelsu-next/kernelsu "${MODULE_PATH}"
              echo "Activated: Kernelsu Next + sufs"
              ;;
            kernelsu_stable)
              cp -r xiaomi_kernel_odin/scripts/tools/root/Kernelsu/kernelsu "${MODULE_PATH}"
              cp -r xiaomi_kernel_odin/scripts/tools/root/Kernelsu/ksuversion xiaomi_kernel_odin/ksuversion
              echo "Activated: Kernelsu Stable + sufs"
              ;;
            suki_su_ultra)
              cp -r xiaomi_kernel_odin/scripts/tools/root/SukiSU-Ultra/kernelsu "${MODULE_PATH}"
              echo "Activated: SukiSU Ultra + sufs"
              echo "KPM_FLAG=1" >> $GITHUB_ENV
              ;;
            mksu_root)
              cp -r xiaomi_kernel_odin/scripts/tools/root/MKSU/kernelsu "${MODULE_PATH}"
              echo "Activated: MKSU Root + sufs"
              ;;
            *)
              echo "Invalid root option selected"
              exit 1
              ;;
          esac

      - name: Generate kernel config
        run: |
          cd xiaomi_kernel_odin
          make O=out ARCH=arm64 $TARGET_DEFCONFIG
          make O=out ARCH=arm64 menuconfig
          make O=out ARCH=arm64 savedefconfig
          cp out/defconfig arch/arm64/configs/$TARGET_DEFCONFIG

      - name: Compile kernel
        id: compile
        run: |
          cd xiaomi_kernel_odin
          START=$(date +%s)
          if ! make ${build_flags} 2>&1 | tee ../kernel_build.log; then
            echo "Build failed - see kernel_build.log"
            exit 1
          fi
          END=$(date +%s)
          echo "::set-output name=duration:: $((END - START))"

      - name: Check for kernel modules
        id: check_mods
        run: |
          if grep -q '=m' xiaomi_kernel_odin/out/.config; then
            echo "::set-output name=has_modules::true"
          else
            echo "::set-output name=has_modules::false"
          fi

      - name: Install modules
        if: steps.check_mods.outputs.has_modules == 'true'
        run: |
          cd xiaomi_kernel_odin
          make ${build_flags} INSTALL_MOD_PATH=modules INSTALL_MOD_STRIP=1 modules_install
          cd ../scripts/tools/AnyKernel3
          cp $(find "../.."/out/modules/lib/modules/5.4* -name '*.ko') modules/vendor/lib/modules/
          cp "../.."/out/modules/lib/modules/5.4/modules.{alias,dep,softdep} modules/vendor/lib/modules/
          cp "../.."/out/modules/lib/modules/5.4/modules.order modules/vendor/lib/modules/modules.load
          sed -i 's/.*\///g' modules/vendor/lib/modules/modules.load
          sed -i 's/do.modules=0/do.modules=1/g' anykernel.sh

      - name: Package kernel zip
        run: |
          cd scripts/tools/AnyKernel3
          cp ../../xiaomi_kernel_odin/out/arch/arm64/boot/Image Image
          if [ "${{ env.KPM_FLAG }}" = "1" ]; then
            cp ../root/SukiSU-Ultra/patch_linux .
            ./patch_linux
            mv -f oImage Image
            rm -f patch_linux
          fi
          if [ -d ".git" ]; then
            COMMIT=$(git -C ../.. rev-parse --short=7 HEAD)
            ZIP_NAME="XiaomiOdin-5.4.289-g${COMMIT}.zip"
          else
            ZIP_NAME="XiaomiOdin-5.4.289-$(date '+%Y%m%d%H%M').zip"
          fi
          zip -r9 "${ZIP_NAME}" *
          mv "${ZIP_NAME}" ../../..

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel_artifacts
          paths:
            - kernel_build.log
            - "*.zip"

      - name: Display build stats
        run: |
          echo "Build completed in $(( ${{ steps.compile.outputs.duration }} / 60 )) minutes"
          echo "Generated ZIP: $(ls *.zip)"
